fastlane_version "2.129.0"

default_platform :ios

platform :ios do

  name = "KeyboardKit"
  main_branch = "master"


  # GestureButton ==============

  gb_source = "../gesturebutton/Sources/GestureButton/"
  gb_target = "Sources/" + name + "/_GestureButton/"

  desc "Remove GestureButton"
  lane :gbremove do
    sh("cd .. && rm -rf " + gb_target)
  end

  desc "Add GestureButton"
  lane :gbadd do
    sh("cd .. && cp -r " + gb_source + " " + gb_target)
    sh("cd .. && rm -rf " + gb_target + "/GestureButton.docc")
    sh("cd .. && git add .")
  end

  desc "Update GestureButton"
  lane :gbupdate do
    ensure_git_status_clean
    gbremove
    gbadd
    git_commit(path: "*", message: "Update GestureButton")
  end


  # Build ==================
  
  lane :build do
    build_platform(platform: "iOS")
    build_platform(platform: "OS X")
    build_platform(platform: "tvOS")
    build_platform(platform: "watchOS")
    build_platform(platform: "xrOS")
  end
  
  lane :build_platform do |options|
    platform = options[:platform]
    sh("cd .. && xcodebuild -scheme " + name + " -derivedDataPath .build -destination 'generic/platform=" + platform + "';")
  end


  # Test ==================
  
  lane :test do
    test_platform(destination: "platform=iOS Simulator,name=iPhone 16")
  end
  
  lane :test_platform do |options|
    destination = options[:destination]
    sh("cd .. && xcodebuild test -scheme " + name + " -derivedDataPath .build -destination '" + destination + "' -enableCodeCoverage YES;")
  end


  # Version ================

  desc "Create a new version"
  lane :version do |options|
    version_validate

    type = options[:type]
    version = version_bump_podspec(path: 'Version', bump_type: type)
    git_commit(path: "*", message: "Bump to #{version}")
    add_git_tag(tag: version)
    push_git_tags()
    push_to_git_remote()
  end
  
  desc "Validate that the repo is valid for release"
  lane :version_validate do
    ensure_git_status_clean
    ensure_git_branch(branch: main_branch)
    swiftlint(strict: true)
    build
    test
  end

end